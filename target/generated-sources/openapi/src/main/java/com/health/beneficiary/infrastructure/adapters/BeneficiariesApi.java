/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.health.beneficiary.infrastructure.adapters;

import com.health.beneficiary.infrastructure.adapters.data.Beneficiary;
import com.health.beneficiary.infrastructure.adapters.data.BeneficiaryRequest;
import com.health.beneficiary.infrastructure.adapters.data.BeneficiarySummary;
import com.health.beneficiary.infrastructure.adapters.data.Document;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-13T11:42:47.949547-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "beneficiaries", description = "the beneficiaries API")
public interface BeneficiariesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /beneficiaries/{beneficiaryId} : Remover um beneficiário
     *
     * @param beneficiaryId  (required)
     * @return Beneficiário removido com sucesso (status code 200)
     *         or Beneficiário não encontrado (status code 404)
     *         or Erro interno do servidor (status code 500)
     */
    @Operation(
        operationId = "beneficiariesBeneficiaryIdDelete",
        summary = "Remover um beneficiário",
        responses = {
            @ApiResponse(responseCode = "200", description = "Beneficiário removido com sucesso"),
            @ApiResponse(responseCode = "404", description = "Beneficiário não encontrado"),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/beneficiaries/{beneficiaryId}"
    )
    default ResponseEntity<Void> beneficiariesBeneficiaryIdDelete(
        @Parameter(name = "beneficiaryId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("beneficiaryId") String beneficiaryId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /beneficiaries/{beneficiaryId}/documents : Listar todos os documentos de um beneficiário a partir de seu id
     *
     * @param beneficiaryId  (required)
     * @return Lista de documentos (status code 200)
     *         or Beneficiário não encontrado (status code 404)
     *         or Erro interno do servidor (status code 500)
     */
    @Operation(
        operationId = "beneficiariesBeneficiaryIdDocumentsGet",
        summary = "Listar todos os documentos de um beneficiário a partir de seu id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de documentos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Beneficiário não encontrado"),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/beneficiaries/{beneficiaryId}/documents",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Document>> beneficiariesBeneficiaryIdDocumentsGet(
        @Parameter(name = "beneficiaryId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("beneficiaryId") String beneficiaryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"tipoDocumento\" : \"tipoDocumento\", \"id\" : \"id\", \"descricao\" : \"descricao\" }, { \"tipoDocumento\" : \"tipoDocumento\", \"id\" : \"id\", \"descricao\" : \"descricao\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /beneficiaries/{beneficiaryId} : Atualizar os dados cadastrais de um beneficiário
     *
     * @param beneficiaryId  (required)
     * @param beneficiaryRequest  (required)
     * @return Dados do beneficiário atualizados com sucesso (status code 200)
     *         or Requisição inválida (status code 400)
     *         or Beneficiário não encontrado (status code 404)
     *         or Erro interno do servidor (status code 500)
     */
    @Operation(
        operationId = "beneficiariesBeneficiaryIdPut",
        summary = "Atualizar os dados cadastrais de um beneficiário",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dados do beneficiário atualizados com sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Beneficiary.class))
            }),
            @ApiResponse(responseCode = "400", description = "Requisição inválida"),
            @ApiResponse(responseCode = "404", description = "Beneficiário não encontrado"),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/beneficiaries/{beneficiaryId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Beneficiary> beneficiariesBeneficiaryIdPut(
        @Parameter(name = "beneficiaryId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("beneficiaryId") String beneficiaryId,
        @Parameter(name = "BeneficiaryRequest", description = "", required = true) @Valid @RequestBody BeneficiaryRequest beneficiaryRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"telefone\" : \"telefone\", \"documentos\" : [ { \"tipoDocumento\" : \"tipoDocumento\", \"id\" : \"id\", \"descricao\" : \"descricao\" }, { \"tipoDocumento\" : \"tipoDocumento\", \"id\" : \"id\", \"descricao\" : \"descricao\" } ], \"nome\" : \"nome\", \"id\" : \"id\", \"dataNascimento\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /beneficiaries : Listar todos os beneficiários cadastrados
     *
     * @return Lista de beneficiários (status code 200)
     *         or Erro interno do servidor (status code 500)
     */
    @Operation(
        operationId = "beneficiariesGet",
        summary = "Listar todos os beneficiários cadastrados",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de beneficiários", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BeneficiarySummary.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/beneficiaries",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BeneficiarySummary>> beneficiariesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"nome\" : \"nome\", \"id\" : \"id\" }, { \"nome\" : \"nome\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /beneficiaries : Cadastrar um beneficiário junto com seus documentos
     *
     * @param beneficiaryRequest  (required)
     * @return Beneficiário cadastrado com sucesso (status code 201)
     *         or Requisição inválida (status code 400)
     */
    @Operation(
        operationId = "beneficiariesPost",
        summary = "Cadastrar um beneficiário junto com seus documentos",
        responses = {
            @ApiResponse(responseCode = "201", description = "Beneficiário cadastrado com sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Beneficiary.class))
            }),
            @ApiResponse(responseCode = "400", description = "Requisição inválida")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/beneficiaries",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Beneficiary> beneficiariesPost(
        @Parameter(name = "BeneficiaryRequest", description = "", required = true) @Valid @RequestBody BeneficiaryRequest beneficiaryRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"telefone\" : \"telefone\", \"documentos\" : [ { \"tipoDocumento\" : \"tipoDocumento\", \"id\" : \"id\", \"descricao\" : \"descricao\" }, { \"tipoDocumento\" : \"tipoDocumento\", \"id\" : \"id\", \"descricao\" : \"descricao\" } ], \"nome\" : \"nome\", \"id\" : \"id\", \"dataNascimento\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
